# ================================================================================================
# FAITHFUL FINANCES API - ENVIRONMENT CONFIGURATION
# ================================================================================================
# This file contains all environment variables needed to run the Faithful Finances API
# Copy this file to .env and update the values according to your environment
#
# üîë GENERATE: Values you need to generate yourself (use provided commands)
# üè¢ VENDOR:   Values you need to retrieve from external service providers
# ‚öôÔ∏è CONFIG:   Configuration values you can customize
# ================================================================================================

# ================================================================================================
# APPLICATION SETTINGS
# ================================================================================================

# ‚öôÔ∏è Basic application configuration
PROJECT_NAME="Faithful Finances API"
VERSION="1.0.0"
DEBUG=false
ENVIRONMENT="development"  # development|staging|production

# üîë GENERATE: Critical security keys (MUST be generated for production)
#
# SECRET_KEY is used for:
# - Signing and verifying JWT tokens and session cookies
# - CSRF protection tokens
# - Cryptographic signing of sensitive data
# - Password reset tokens and email verification links
# - API rate limiting token generation
# - Internal application security operations
#
# Requirements:
# - Minimum 64 characters for production
# - Must be cryptographically random
# - Keep secret and never commit to version control
# - Rotate periodically (every 90 days recommended)
#
# Generate SECRET_KEY: python -c "import secrets; print(secrets.token_urlsafe(64))"
SECRET_KEY="your-super-secret-key-here-replace-in-production-64-chars-minimum"

# üîë GENERATE: Encryption key for sensitive data (32+ characters)
#
# ENCRYPTION_KEY is used for:
# - Encrypting tenant API keys and tokens in the database
# - Encrypting sensitive financial data (account numbers, routing numbers)
# - Encrypting user PII (personally identifiable information)
# - Encrypting Plaid access tokens and refresh tokens
# - Encrypting Stripe payment method details
# - Encrypting webhook secrets and external service credentials
# - Secure storage of OAuth tokens and refresh tokens
#
# Technical details:
# - Uses PBKDF2-HMAC-SHA256 key derivation with 100,000 iterations
# - Creates Fernet encryption keys for symmetric encryption
# - Supports key rotation with backward compatibility
# - All encrypted data includes authentication to prevent tampering
#
# Requirements:
# - Minimum 32 characters for production (Fernet requirement)
# - Must be cryptographically random
# - Never change without data migration plan
# - Store securely (consider using environment-specific key management)
#
# Generate ENCRYPTION_KEY: python -c "import secrets; print(secrets.token_urlsafe(32))"
ENCRYPTION_KEY="your-encryption-key-for-tenant-tokens-32-chars-minimum"

# üîí SECURITY NOTE: Key Management Best Practices
# 
# Development:
# - Use the generated keys above for local development
# - Keys can be shared among development team
# - Consider using a .env.local file for personal overrides
# 
# Production:
# - Generate unique keys for each environment (staging, production)
# - Use environment-specific key management systems (AWS KMS, Azure Key Vault, etc.)
# - Implement key rotation procedures
# - Never log or expose these keys in application code
# - Consider using hardware security modules (HSMs) for high-security deployments
# 
# Key Rotation:
# - Plan for periodic key rotation (SECRET_KEY: every 90 days, ENCRYPTION_KEY: yearly)
# - Implement graceful key rotation with overlap periods
# - Test key rotation procedures in staging environment
# - Have rollback procedures in case of key rotation issues

# ================================================================================================
# SERVER CONFIGURATION
# ================================================================================================

# ‚öôÔ∏è Server binding configuration
HOST="0.0.0.0"              # Bind to all interfaces
PORT=8000                   # Default FastAPI port
RELOAD=false                # Set to true for development only

# ‚öôÔ∏è API Documentation URLs (set to null to disable in production)
DOCS_URL="/docs"            # Swagger UI endpoint
REDOC_URL="/redoc"          # ReDoc endpoint  
OPENAPI_URL="/openapi.json" # OpenAPI schema endpoint

# ================================================================================================
# AUTH0 AUTHENTICATION - üè¢ VENDOR CONFIGURATION
# ================================================================================================
# Get these values from your Auth0 Dashboard (https://manage.auth0.com/)
# 1. Create a new Application of type "Machine to Machine API"
# 2. Create an API in Auth0 for your backend
# 3. Copy the values from your Auth0 dashboard

# üè¢ VENDOR: Auth0 domain (found in Auth0 Dashboard > Applications > Settings)
AUTH0_DOMAIN="your-tenant.auth0.com"

# üè¢ VENDOR: API Identifier (found in Auth0 Dashboard > APIs > Your API > Settings)
AUTH0_AUDIENCE="https://api.faithfulfinances.com"

# üè¢ VENDOR: Application credentials (found in Auth0 Dashboard > Applications > Your App)
AUTH0_CLIENT_ID="your-24-character-auth0-client-id"
AUTH0_CLIENT_SECRET="your-64-character-auth0-client-secret"

# ================================================================================================
# DATABASE CONFIGURATION - üè¢ VENDOR (TURSO)
# ================================================================================================
# Get these values from Turso (https://turso.tech/)
# 1. Create account at https://turso.tech/
# 2. Create a database for the global tenant registry
# 3. Generate authentication tokens
# 4. Each tenant will have their own database (auto-created by the application)

# üè¢ VENDOR: Global database URL (from Turso dashboard)
# Format: libsql://[database-name]-[org-name].turso.io
GLOBAL_DATABASE_URL="libsql://faithful-finances-global.turso.io"

# üè¢ VENDOR: Global database authentication token (from Turso CLI or dashboard)
# Generate with: turso db tokens create [database-name]
GLOBAL_AUTH_TOKEN="eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9.example-token-replace-with-real"

# ‚öôÔ∏è Database debugging (set to true to log all SQL queries)
DATABASE_ECHO=false

# ================================================================================================
# MULTI-TENANCY CONFIGURATION
# ================================================================================================

# ‚öôÔ∏è Tenant resolution strategy
DEFAULT_TENANT_RESOLVER="composite"  # composite|subdomain|header|token
TENANT_HEADER_NAME="X-Tenant-ID"     # Header name for tenant identification

# ‚öôÔ∏è Tenant limits and validation
MAX_TENANTS_PER_USER=5      # Maximum tenants per Auth0 user
TENANT_SLUG_MIN_LENGTH=3    # Minimum tenant slug length
TENANT_SLUG_MAX_LENGTH=50   # Maximum tenant slug length

# ================================================================================================
# CORS (Cross-Origin Resource Sharing)
# ================================================================================================

# ‚öôÔ∏è CORS configuration for frontend applications
# Development: Allow localhost
# Production: Restrict to your domains only
CORS_ALLOW_ORIGINS="http://localhost:3000,http://localhost:3001,https://*.faithfulfinances.com"
CORS_ALLOW_CREDENTIALS=true
CORS_ALLOW_METHODS="GET,POST,PUT,DELETE,OPTIONS"
CORS_ALLOW_HEADERS="*"

# ================================================================================================
# SECURITY CONFIGURATION
# ================================================================================================

# ‚öôÔ∏è Security policies and enforcement
ENFORCE_HTTPS=false                    # Set to true in production
SECURITY_HEADERS_ENABLED=true         # Enable security headers
CSP_ENABLED=true                      # Enable Content Security Policy
HSTS_MAX_AGE=31536000                 # HSTS max age (1 year)

# ‚öôÔ∏è Input validation limits
MAX_JSON_DEPTH=10                     # Maximum JSON nesting depth
MAX_JSON_KEYS=100                     # Maximum JSON object keys
MAX_STRING_LENGTH=10000               # Maximum string input length

# ‚öôÔ∏è Security monitoring
SECURITY_MONITORING_ENABLED=true      # Enable security event monitoring
SECURITY_EVENT_RETENTION_DAYS=90      # Security event retention period
SUSPICIOUS_ACTIVITY_THRESHOLD=5       # Suspicious activity detection threshold

# ‚öôÔ∏è Password and session security
PASSWORD_MIN_LENGTH=8                 # Minimum password length
PASSWORD_REQUIRE_UPPERCASE=true       # Require uppercase letters
PASSWORD_REQUIRE_LOWERCASE=true       # Require lowercase letters
PASSWORD_REQUIRE_NUMBERS=true         # Require numbers
PASSWORD_REQUIRE_SYMBOLS=false        # Require special symbols

SESSION_TIMEOUT_MINUTES=480           # Session timeout (8 hours)
FAILED_LOGIN_ATTEMPTS_LIMIT=5         # Failed login attempts before lockout
ACCOUNT_LOCKOUT_DURATION_MINUTES=30   # Account lockout duration

# ================================================================================================
# RATE LIMITING
# ================================================================================================

# ‚öôÔ∏è API rate limiting configuration
RATE_LIMIT_REQUESTS=1000      # Requests per window per IP/tenant
RATE_LIMIT_WINDOW=3600        # Time window in seconds (1 hour)

# ================================================================================================
# PLAID INTEGRATION - üè¢ VENDOR CONFIGURATION
# ================================================================================================
# Get these values from Plaid Dashboard (https://dashboard.plaid.com/)
# 1. Create a Plaid account
# 2. Get your client_id and secret from the dashboard
# 3. Choose environment: sandbox (testing) | development | production

# üè¢ VENDOR: Plaid credentials (from Plaid Dashboard > Team Settings > API)
PLAID_CLIENT_ID="your-24-character-plaid-client-id"
PLAID_SECRET="your-30-character-plaid-secret-key"

# ‚öôÔ∏è Plaid environment configuration
PLAID_ENV="sandbox"                           # sandbox|development|production
PLAID_PRODUCTS="transactions,accounts,identity,liabilities"  # Comma-separated list
PLAID_COUNTRY_CODES="US"                      # Comma-separated country codes

# ================================================================================================
# STRIPE PAYMENT PROCESSING - üè¢ VENDOR CONFIGURATION  
# ================================================================================================
# Get these values from Stripe Dashboard (https://dashboard.stripe.com/)
# 1. Create a Stripe account
# 2. Get your API keys from Developers > API keys
# 3. Set up webhooks and get webhook signing secret

# üè¢ VENDOR: Stripe API keys (from Stripe Dashboard > Developers > API keys)
# Test keys start with sk_test_ and pk_test_
# Live keys start with sk_live_ and pk_live_
STRIPE_SECRET_KEY="sk_test_REPLACE_WITH_YOUR_STRIPE_SECRET_KEY_FROM_DASHBOARD"
STRIPE_PUBLISHABLE_KEY="pk_test_REPLACE_WITH_YOUR_STRIPE_PUBLISHABLE_KEY_FROM_DASHBOARD"

# üè¢ VENDOR: Stripe webhook secret (from Stripe Dashboard > Developers > Webhooks)
# Create webhook endpoint pointing to: https://your-api.com/webhooks/stripe
STRIPE_WEBHOOK_SECRET="whsec_REPLACE_WITH_YOUR_STRIPE_WEBHOOK_SECRET_FROM_DASHBOARD"

# ================================================================================================
# REDIS CACHING & SESSION STORE
# ================================================================================================

# ‚öôÔ∏è Redis configuration for caching, sessions, and background tasks
# Local development: redis://localhost:6379
# Production: Use Redis Cloud, AWS ElastiCache, or similar managed service
REDIS_URL="redis://localhost:6379"
REDIS_POOL_SIZE=10
REDIS_DECODE_RESPONSES=true

# ================================================================================================
# BACKGROUND TASK PROCESSING (CELERY)
# ================================================================================================

# ‚öôÔ∏è Celery configuration for background jobs
# Uses Redis as both broker and result backend
# Use different Redis databases to separate concerns
CELERY_BROKER_URL="redis://localhost:6379/1"      # Redis DB 1 for task queue
CELERY_RESULT_BACKEND="redis://localhost:6379/2"  # Redis DB 2 for results

# ================================================================================================
# EMAIL CONFIGURATION
# ================================================================================================

# üè¢ VENDOR: SMTP configuration for sending emails
# Gmail example (requires App Password):
# 1. Enable 2FA on your Google account
# 2. Generate App Password: https://myaccount.google.com/apppasswords
# 3. Use the app password (not your regular password)

SMTP_HOST="smtp.gmail.com"           # Gmail SMTP server
SMTP_PORT=587                        # Gmail SMTP port
SMTP_USERNAME="your-email@gmail.com" # Your Gmail address
SMTP_PASSWORD="your-16-char-app-password"  # Gmail App Password (not regular password)
SMTP_USE_TLS=true                    # Enable TLS encryption
SMTP_USE_SSL=false                   # Don't use SSL (TLS is preferred)

# ‚öôÔ∏è Email sender configuration
EMAIL_FROM_ADDRESS="noreply@faithfulfinances.com"
EMAIL_FROM_NAME="Faithful Finances"

# ================================================================================================
# LOGGING & MONITORING
# ================================================================================================

# ‚öôÔ∏è Application logging configuration
LOG_LEVEL="INFO"        # DEBUG|INFO|WARNING|ERROR|CRITICAL
LOG_FORMAT="json"       # json|console (json recommended for production)

# üè¢ VENDOR: Optional Sentry error tracking (https://sentry.io/)
# 1. Create Sentry account and project
# 2. Copy DSN from Settings > Client Keys
SENTRY_DSN=""  # Optional: Your Sentry DSN for error tracking

# ‚öôÔ∏è Metrics collection
PROMETHEUS_METRICS_ENABLED=true  # Enable Prometheus metrics endpoint

# ================================================================================================
# FILE STORAGE
# ================================================================================================

# ‚öôÔ∏è File upload and storage configuration
STORAGE_PROVIDER="local"           # local|s3|gcs (local for development)
STORAGE_PATH="./uploads"           # Local storage path
MAX_UPLOAD_SIZE=10485760          # 10MB in bytes
ALLOWED_EXTENSIONS=".jpg,.jpeg,.png,.pdf,.csv,.xlsx"  # Comma-separated

# üè¢ VENDOR: AWS S3 configuration (if using S3 storage)
# Uncomment and configure if STORAGE_PROVIDER="s3"
# AWS_ACCESS_KEY_ID="your-aws-access-key"
# AWS_SECRET_ACCESS_KEY="your-aws-secret-key"
# AWS_S3_BUCKET="your-s3-bucket-name"
# AWS_S3_REGION="us-east-1"

# ================================================================================================
# DEVELOPMENT & TESTING
# ================================================================================================

# ‚öôÔ∏è Development-specific settings
# Set RELOAD=true for auto-restart during development
# Set DEBUG=true for detailed error messages (NEVER in production)

# For local development, you can override any setting:
# DEBUG=true
# PLAID_ENV="sandbox"
# STRIPE_SECRET_KEY="sk_test_..."
# LOG_LEVEL="DEBUG"

# ================================================================================================
# PRODUCTION DEPLOYMENT CHECKLIST
# ================================================================================================
# Before deploying to production, ensure:
# 
# üîê SECURITY:
# ‚úì Generate new SECRET_KEY and ENCRYPTION_KEY
# ‚úì Set ENVIRONMENT="production"
# ‚úì Set DEBUG=false
# ‚úì Set ENFORCE_HTTPS=true
# ‚úì Restrict CORS_ALLOW_ORIGINS to your domains only
# ‚úì Set strong passwords and secure all vendor secrets
# ‚úì Disable DOCS_URL, REDOC_URL, OPENAPI_URL in production
#
# üè¢ VENDOR ACCOUNTS:
# ‚úì Switch Plaid to production environment
# ‚úì Switch Stripe to live keys
# ‚úì Set up production databases in Turso
# ‚úì Configure production email service
# ‚úì Set up production Redis instance
#
# ‚öôÔ∏è INFRASTRUCTURE:
# ‚úì Set up proper SSL/TLS certificates
# ‚úì Configure load balancers and health checks
# ‚úì Set up monitoring and alerting
# ‚úì Configure backup strategies
# ‚úì Test disaster recovery procedures
#
# üìä MONITORING:
# ‚úì Set up Sentry for error tracking
# ‚úì Configure log aggregation
# ‚úì Set up performance monitoring
# ‚úì Test security monitoring alerts
# ================================================================================================

# ================================================================================================
# QUICK SETUP COMMANDS
# ================================================================================================
# 
# 1. Generate SECRET_KEY:
#    python -c "import secrets; print('SECRET_KEY=' + secrets.token_urlsafe(64))"
#
# 2. Generate ENCRYPTION_KEY:
#    python -c "import secrets; print('ENCRYPTION_KEY=' + secrets.token_urlsafe(32))"
#
# 3. Install Redis (macOS):
#    brew install redis && brew services start redis
#
# 4. Install Redis (Ubuntu):
#    sudo apt update && sudo apt install redis-server
#
# 5. Test Redis connection:
#    redis-cli ping
#
# 6. Check configuration:
#    python -c "from src.config import settings; print('Config loaded successfully!')"
#
# ================================================================================================